// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Jonss/posterr/pkg/user (interfaces: Service)

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	user "github.com/Jonss/posterr/pkg/user"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FetchUser mocks base method.
func (m *MockService) FetchUser(arg0 context.Context, arg1 string) (*user.FetchUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", arg0, arg1)
	ret0, _ := ret[0].(*user.FetchUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUser indicates an expected call of FetchUser.
func (mr *MockServiceMockRecorder) FetchUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockService)(nil).FetchUser), arg0, arg1)
}
