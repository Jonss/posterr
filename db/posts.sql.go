// Code generated by sqlc. DO NOT EDIT.
// source: posts.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countPosts = `-- name: CountPosts :one
SELECT count(1) FROM posts
WHERE user_id = $1
`

func (q *Queries) CountPosts(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPosts, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPostsInRange = `-- name: CountPostsInRange :one
SELECT count(1) FROM posts
WHERE user_id = $1
AND created_at BETWEEN $2 AND $3
`

type CountPostsInRangeParams struct {
	UserID      int64
	CreatedAt   time.Time
	CreatedAt_2 time.Time
}

func (q *Queries) CountPostsInRange(ctx context.Context, arg CountPostsInRangeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPostsInRange, arg.UserID, arg.CreatedAt, arg.CreatedAt_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts(
    content, user_id, original_post_id
) VALUES (
    $1, $2, $3
) RETURNING id, content, user_id, original_post_id, created_at
`

type CreatePostParams struct {
	Content        sql.NullString
	UserID         int64
	OriginalPostID sql.NullInt64
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Content, arg.UserID, arg.OriginalPostID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.OriginalPostID,
		&i.CreatedAt,
	)
	return i, err
}

const seedPost = `-- name: SeedPost :one
INSERT INTO posts(
    content, user_id, original_post_id, created_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, content, user_id, original_post_id, created_at
`

type SeedPostParams struct {
	Content        sql.NullString
	UserID         int64
	OriginalPostID sql.NullInt64
	CreatedAt      time.Time
}

func (q *Queries) SeedPost(ctx context.Context, arg SeedPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, seedPost,
		arg.Content,
		arg.UserID,
		arg.OriginalPostID,
		arg.CreatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.OriginalPostID,
		&i.CreatedAt,
	)
	return i, err
}
